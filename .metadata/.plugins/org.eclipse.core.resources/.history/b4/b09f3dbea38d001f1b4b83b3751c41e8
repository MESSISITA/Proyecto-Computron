package vistas;

import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

import arreglos.ArregloProductos;
import clases.Producto;

import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.Color;
import javax.swing.JLabel;
import javax.swing.ImageIcon;
import vistas.MenuPrincipal;

public class Reportes extends JFrame implements ActionListener {

    private JPanel contentPane;

    /**
     * Launch the application.
     */
    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    Reportes frame = new Reportes();
                    frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    /**
     * Create the frame.
     */
    public Reportes() {
        setTitle("Reportes");
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setBounds(100, 100, 833, 529);
        setLocationRelativeTo(null);
        contentPane = new JPanel();
        contentPane.setBackground(new Color(0, 59, 93));
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        setContentPane(contentPane);
        contentPane.setLayout(null);
        
        JLabel lblNewLabel = new JLabel("");
        lblNewLabel.setIcon(new ImageIcon(Reportes.class.getResource("/imagenes/LogoCibertec.jpg")));
        lblNewLabel.setBounds(265, -133, 664, 726);
        contentPane.add(lblNewLabel);

        // Crear JMenuBar
        JMenuBar menuBar = new JMenuBar();
        setJMenuBar(menuBar);

        // Crear JMenu Reportes
        JMenu mnReportes = new JMenu("Reportes");
        menuBar.add(mnReportes);

        // Opciones de reportes
        JMenuItem miListadoVentas = new JMenuItem("Listado General de Ventas");
        miListadoVentas.addActionListener(this);
        mnReportes.add(miListadoVentas);

        JMenuItem miStockMinimo = new JMenuItem("Listado de Productos por Stock Mínimo");
        miStockMinimo.addActionListener(this);
        mnReportes.add(miStockMinimo);

        JMenuItem miUnidadesVendidas = new JMenuItem("Listado de Productos por Unidades Vendidas");
        miUnidadesVendidas.addActionListener(this);
        mnReportes.add(miUnidadesVendidas);

        JMenuItem miImporteTotal = new JMenuItem("Listado de Productos por Importe Total Acumulado");
        miImporteTotal.addActionListener(this);
        mnReportes.add(miImporteTotal);
        
		MenuPrincipal menuPrincipal = new MenuPrincipal();
		
		addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                menuPrincipal.setVisible(true); 
            }
        });
    }
    
    //Declaracion global
    ArregloProductos ap = new ArregloProductos();
    
    // Manejo de los eventos de los menús
    @Override
    public void actionPerformed(ActionEvent e) {
        JMenuItem source = (JMenuItem) e.getSource();
        String option = source.getText();

        switch (option) {
        case "Listado de Productos por Stock Mínimo":
            JOptionPane.showMessageDialog(this, "Generando Listado de Productos por Stock Mínimo...");

            int stockMinimo = 0; // Cambia el valor según tu criterio

            StringBuilder productosConStockMinimo = new StringBuilder();
            productosConStockMinimo.append("Productos con stock mínimo:\n");

            boolean hayProductosConStockMinimo = false;

            for (int i = 0; i < ap.tamano(); i++) {
                Producto producto = ap.obtener(i);
                
                // Verificar si el stock del producto es menor o igual al mínimo
                if (producto.getStockActual() <= producto.getStockMinimo()) {
                    productosConStockMinimo.append(producto.getNombre())
                                          .append(" - Stock: ")
                                          .append(producto.getStockActual())
                                          .append("\n");
                    hayProductosConStockMinimo = true; 
                }

            }

            // Mostrar el listado de productos con stock mínimo si se encontró alguno
            if (hayProductosConStockMinimo) {
                JOptionPane.showMessageDialog(this, productosConStockMinimo.toString());
            } else {
                JOptionPane.showMessageDialog(this, "No hay productos con stock mínimo.");
            }

            break;


            case "Listado de Productos por Unidades Vendidas":
                JOptionPane.showMessageDialog(this, "Generando Listado de Productos por Unidades Vendidas...");
                // Aquí puedes implementar la lógica para mostrar el listado de productos por unidades vendidas
                break;
            case "Listado de Productos por Importe Total Acumulado":
                JOptionPane.showMessageDialog(this, "Generando Listado de Productos por Importe Total Acumulado...");
                // Aquí puedes implementar la lógica para mostrar el listado de productos por importe total acumulado
                break;
            default:
                break;
        }
    }
}
